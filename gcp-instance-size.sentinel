import "tfplan/v2" as tfplan


allComputeInstances = filter tfplan.resource_changes as _, resource_changes {
	resource_changes.type is "google_compute_instance" and
		resource_changes.mode is "managed" and
		(resource_changes.change.actions contains "create" or
			resource_changes.change.actions is ["update"])
}

### filter_attribute_not_in_list ###
# Filter a list of resources to those with a specified
# attribute (attr) that is not in a given list of allowed values (allowed).
# Resources should be derived by applying filters to tfplan.resource_changes.
# Set prtmsg to `true` (without quotes) if you want to print violation messages.
# If you want to allow null, include "null" in the list (allowed).
filter_attribute_not_in_list = func(resources, attr, allowed, prtmsg) {
  violators = {}
  messages = {}
  for resources as address, rc {
    # Evaluate the value (v) of the attribute
    v = evaluate_attribute(rc, attr) else null
    # Convert null to "null"
    if v is null {
      v = "null"
    }
    # Check if the value is not in the allowed list
    if v not in allowed {
      # Add the resource and a warning message to the violators list
      message = to_string(address) + " has " + to_string(attr) + " with value " +
                to_string(v) + " that is not in the allowed list: " +
                to_string(allowed)
      violators[address] = rc
      messages[address] = message
      if prtmsg {
        print(message)
      }
    } // end if
  } // end for
  return {"resources":violators,"messages":messages}
}


# Allowed GCE Instance Types
# Include "null" to allow missing or computed values
allowed_types = ["n1-standard-1", "n1-standard-2", "n1-standard-4"]


violatingGCEInstances = filter_attribute_not_in_list(allComputeInstances,
                        "machine_type", allowed_types, true)


violations = length(violatingGCEInstances["messages"])

# Main rule
main = rule {
  violations is 0
}